//This is the route for the generate-plan API endpoint
import { NextRequest, NextResponse } from 'next/server';
//This is the Anthropic SDK
// the anthropic-ai/sdk is a package that allows you to interact with the Anthropic API
// an sdk is a software development kit that allows you to interact with a specific API
import { Anthropic } from '@anthropic-ai/sdk';

// Initialize Anthropic client with API key
const apiKey = process.env.ANTHROPIC_API_KEY;
// isDevelopment is a boolean that is true if the NODE_ENV is development
const isDevelopment = process.env.NODE_ENV === 'development';

console.log('Environment:', process.env.NODE_ENV);
// environment variables are stored in the .env.local file
console.log('API Key available:', !!apiKey);
// !!apiKey is a boolean that is true if apiKey is not null or undefined
// For debugging environment variables in development
if (isDevelopment) {
  console.log('Available environment variables:', Object.keys(process.env).filter(key => !key.includes('_KEY')));
}

const getAnthropicClient = () => {
  if (!apiKey) {
    // if apiKey is not set in environment variables, throw an error
    console.error('ANTHROPIC_API_KEY is not set in environment variables');
    // throw an error with a message
    throw new Error('Missing API key for Anthropic');
  }
  
  return new Anthropic({
    // anthropic is the name of the client
    apiKey: apiKey
  });
};

// Define a mock plan for development/testing purposes when no API key is available
const mockPlan = {
  summary: "This is a mock AI plan because no API key was available. In production, this would be generated by Claude.",
  features: [
    "User authentication and profiles",
    "Content discovery feed based on user interests",
    "Personalized news recommendations", 
    "Bookmarking and saving articles for later",
    "Sharing capabilities to social media platforms",
    "Mobile-responsive design with offline reading mode"
  ],
  techStack: [
    "React.js: For building a dynamic and responsive UI",
    "Next.js: For server-side rendering and API routes",
    "Firebase: For authentication and real-time database",
    "TailwindCSS: For rapid UI development with a clean design system",
    "NewsAPI: For fetching relevant news content",
    "Vercel: For deployment and serverless functions"
  ],
  timeline: "Development will take approximately 2-3 months, with an initial MVP in 4-6 weeks. Phase 1 (Weeks 1-4): Core functionality and UI. Phase 2 (Weeks 5-8): Personalization and recommendations. Phase 3 (Weeks 9-12): Refinement and additional features."
};

//This is the POST request handler for the generate-plan API endpoint
export async function POST(request: NextRequest) {
  //This is the body of the request
  console.log("API route called: generate-plan");
  
  try {
    // Check for API key first
    if (!apiKey) {
        // if apiKey is not set in environment variables, log a warning
      console.warn('ANTHROPIC_API_KEY is not set in environment variables, using mock plan for development');
      
      // In development, log more info to help debugging
      if (isDevelopment) {
        console.log('In development mode, please check:');
        console.log('1. Your .env.local file has the correct ANTHROPIC_API_KEY value');
        console.log('2. You have restarted the Next.js server after adding the key');
        console.log('3. If using npm run dev, environment variables are being loaded correctly');
      }
      
      //This is the project data from the request
      const projectData = await request.json();
      console.log("Project data received for mock plan:", JSON.stringify(projectData, null, 2));
      
      // Convert mock plan to text format to match the Claude response
      const mockResponse = `
# Development Plan for ${projectData?.name || 'Your Project'}

## Summary
${mockPlan.summary}

## Key Features
${mockPlan.features.map(feature => `- ${feature}`).join('\n')}

## Recommended Tech Stack
${mockPlan.techStack.map(tech => `- ${tech}`).join('\n')}

## Timeline
${mockPlan.timeline}
      `;
      
      return NextResponse.json(
        { response: mockResponse },
        { status: 200 }
      );
    }

    // Initialize Anthropic client
    const anthropic = getAnthropicClient();

    //This is the project data from the request
    const projectData = await request.json();
    console.log("Project data received:", JSON.stringify(projectData, null, 2));
    
    // In a real implementation, we would validate the project data
    
    // Create a prompt for Claude based on the project data
    const systemPrompt = `You are an expert AI project planner and software architect. Your task is to create a detailed development plan for a project based on the requirements provided.

    Your plan should be realistic, insightful, and tailored to the specific project needs. It must include:

    1. A concise but detailed summary of the project that captures its essence and value proposition
    2. A list of key features that should be implemented, ordered by priority and addressing specific user needs
    3. A recommended tech stack with specific modern technologies, languages, frameworks, and tools that are well-suited for this particular project
    4. A detailed step-by-step build process with clear phases and milestones
    5. A suggested data schema with entities, fields, and relationships
    6. A recommended folder structure for organizing the codebase

    Format your response as a structured JSON object with the following keys:
    - summary (string)
    - features (array of strings)
    - techStack (array of strings)
    - buildSteps (array of objects with "phase" and "tasks" keys, where tasks is an array of strings)
    - dataSchema (array of objects with "entity", "fields", and "relationships" keys)
    - folderStructure (array of strings representing folders and files)

    For each technology in the tech stack, provide a brief explanation of why it's appropriate.
    For the features, focus on user-centric functionality that delivers value.
    For buildSteps, create a logical sequence of tasks grouped into phases.
    For dataSchema, define the main data entities, their fields, and relationships between entities.
    For folderStructure, provide a clear, organized structure following best practices for the tech stack.
    
    Be specific and practical in your recommendations. Avoid generic advice.`;

    // Create the user message with project details
    const userMessage = `
      I need a detailed development plan for a project with the following details:
      
      Project Name: ${projectData.name}
      ${projectData.projectType ? `Project Type: ${projectData.projectType} (website/app)` : ''}
      Description: ${projectData.description}
      ${projectData.businessType ? `Business Type: ${projectData.businessType}` : ''}
      ${projectData.goals ? `Goals: ${projectData.goals}` : ''}
      Target Audience: ${projectData.targetAudience}
      ${projectData.valueProposition ? `Value Proposition: ${projectData.valueProposition}` : ''}
      User Flow: ${projectData.userFlow || 'Not specified'}
      
      Please provide a comprehensive plan that addresses these specific requirements and will help me build this project successfully.
      
      Include at least 4-6 specific features and 4-6 specific technologies in the tech stack.
      Create a detailed step-by-step build process with clear phases (planning, setup, core development, testing, deployment).
      Design a data schema with the main entities needed for this application.
      Suggest a folder structure that follows modern best practices for the tech stack.
      Be concrete and specific in all your recommendations.
      
      Format your response as friendly conversational text, not JSON, with clear headings and bullet points.
    `;

    console.log("Calling Anthropic API...");
    
    try {
      // Call Claude API to generate the plan - updated to match latest SDK format
      const message = await anthropic.messages.create({
        model: "claude-3-7-sonnet-20250219",
        max_tokens: 3000,
        temperature: 0.7,
        system: systemPrompt,
        messages: [
          {
            role: "user",
            content: userMessage
          }
        ]
      });

      console.log("API Response structure:", JSON.stringify({
        id: message.id,
        model: message.model,
        type: message.type,
        contentTypes: Array.isArray(message.content) 
          ? message.content.map(c => c.type) 
          : typeof message.content
      }, null, 2));

      // Extract the response text from the Anthropic API response
      let responseText = '';
      
      // Handle different response structures
      if (Array.isArray(message.content)) {
        console.log("Content is an array with length:", message.content.length);
        
        // Loop through content blocks
        for (const contentBlock of message.content) {
          console.log("Content block type:", contentBlock.type);
          
          // Extract text from text-type blocks
          if (contentBlock.type === 'text') {
            responseText += contentBlock.text;
          }
        }
      } else if (message.content && typeof message.content === 'object') {
        console.log("Content is an object with keys:", Object.keys(message.content));
        
        // Use type assertion for TypeScript
        const contentObj = message.content as Record<string, unknown>;
        if (typeof contentObj.text === 'string') {
          responseText = contentObj.text;
        }
      }
      
      if (!responseText) {
        console.error('No text content found in response');
        console.log('Full message structure:', JSON.stringify(message, null, 2));
        return NextResponse.json(
          { error: 'No text content in API response' },
          { status: 500 }
        );
      }

      console.log("Extracted response text (first 200 chars):", responseText.substring(0, 200));
      
      // Return the response text directly instead of trying to parse JSON
      return NextResponse.json({ 
        response: responseText 
      });
    } catch (error) {
      console.error('Error generating AI plan:', error);
      return NextResponse.json(
        { error: 'Failed to generate AI plan' },
        { status: 500 }
      );
    }
  } catch (error) {
    console.error('Error generating AI plan:', error);
    return NextResponse.json(
      { error: 'Failed to generate AI plan' },
      { status: 500 }
    );
  }
} 