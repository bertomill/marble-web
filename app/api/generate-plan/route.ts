//This is the route for the generate-plan API endpoint
import { NextRequest, NextResponse } from 'next/server';
import { Anthropic } from '@anthropic-ai/sdk';

// Initialize Anthropic client with API key
const apiKey = process.env.ANTHROPIC_API_KEY;
const isDevelopment = process.env.NODE_ENV === 'development';

console.log('Environment:', process.env.NODE_ENV);
console.log('API Key available:', !!apiKey);

// For debugging environment variables in development
if (isDevelopment) {
  console.log('Available environment variables:', Object.keys(process.env).filter(key => !key.includes('_KEY')));
}

const getAnthropicClient = () => {
  if (!apiKey) {
    console.error('ANTHROPIC_API_KEY is not set in environment variables');
    throw new Error('Missing API key for Anthropic');
  }
  
  return new Anthropic({
    apiKey: apiKey
  });
};

// Define a mock plan for development/testing purposes when no API key is available
const mockPlan = {
  summary: "This is a mock AI plan because no API key was available. In production, this would be generated by Claude.",
  features: [
    "User authentication and profiles",
    "Content discovery feed based on user interests",
    "Personalized news recommendations", 
    "Bookmarking and saving articles for later",
    "Sharing capabilities to social media platforms",
    "Mobile-responsive design with offline reading mode"
  ],
  techStack: [
    "React.js: For building a dynamic and responsive UI",
    "Next.js: For server-side rendering and API routes",
    "Firebase: For authentication and real-time database",
    "TailwindCSS: For rapid UI development with a clean design system",
    "NewsAPI: For fetching relevant news content",
    "Vercel: For deployment and serverless functions"
  ],
  timeline: "Development will take approximately 2-3 months, with an initial MVP in 4-6 weeks. Phase 1 (Weeks 1-4): Core functionality and UI. Phase 2 (Weeks 5-8): Personalization and recommendations. Phase 3 (Weeks 9-12): Refinement and additional features."
};

//This is the POST request handler for the generate-plan API endpoint
export async function POST(request: NextRequest) {
  //This is the body of the request
  console.log("API route called: generate-plan");
  
  try {
    // Check for API key first
    if (!apiKey) {
      console.warn('ANTHROPIC_API_KEY is not set in environment variables, using mock plan for development');
      
      // In development, log more info to help debugging
      if (isDevelopment) {
        console.log('In development mode, please check:');
        console.log('1. Your .env.local file has the correct ANTHROPIC_API_KEY value');
        console.log('2. You have restarted the Next.js server after adding the key');
        console.log('3. If using npm run dev, environment variables are being loaded correctly');
      }
      
      return NextResponse.json(
        { plan: mockPlan },
        { status: 200 }
      );
    }

    // Initialize Anthropic client
    const anthropic = getAnthropicClient();

    //This is the project data from the request
    const projectData = await request.json();
    console.log("Project data received:", JSON.stringify(projectData, null, 2));
    
    // In a real implementation, we would validate the project data
    
    // Create a prompt for Claude based on the project data
    const systemPrompt = `You are an expert AI project planner and software architect. Your task is to create a detailed development plan for a project based on the requirements provided.

    Your plan should be realistic, insightful, and tailored to the specific project needs. It must include:

    1. A concise but detailed summary of the project that captures its essence and value proposition
    2. A list of key features that should be implemented, ordered by priority and addressing specific user needs
    3. A recommended tech stack with specific modern technologies, languages, frameworks, and tools that are well-suited for this particular project
    4. A realistic timeline for development, broken down into phases or milestones

    Format your response as a structured JSON object with the following keys:
    - summary (string)
    - features (array of strings)
    - techStack (array of strings)
    - timeline (string)

    For each technology in the tech stack, provide a brief explanation of why it's appropriate.
    For the features, focus on user-centric functionality that delivers value.
    
    Be specific and practical in your recommendations. Avoid generic advice.`;

    // Create the user message with project details
    const userMessage = `
      I need a detailed development plan for a project with the following details:
      
      Project Name: ${projectData.name}
      Description: ${projectData.description}
      Business Type: ${projectData.businessType}
      Goals: ${projectData.goals}
      Target Audience: ${projectData.targetAudience}
      User Flow: ${projectData.userFlow}
      
      Please provide a comprehensive plan that addresses these specific requirements and will help me build this project successfully.
      
      Include at least 4-6 specific features and 4-6 specific technologies in the tech stack.
      Be concrete and specific in all your recommendations.
    `;

    console.log("Calling Anthropic API...");
    
    try {
      // Call Claude API to generate the plan - updated to match latest SDK format
      const message = await anthropic.messages.create({
        model: "claude-3-7-sonnet-20250219",
        max_tokens: 3000,
        temperature: 0.7,
        system: systemPrompt,
        messages: [
          {
            role: "user",
            content: userMessage
          }
        ]
      });

      console.log("API Response structure:", JSON.stringify({
        id: message.id,
        model: message.model,
        type: message.type,
        contentTypes: Array.isArray(message.content) 
          ? message.content.map(c => c.type) 
          : typeof message.content
      }, null, 2));

      // Extract the response text from the Anthropic API response
      let responseText = '';
      
      // Handle different response structures
      if (Array.isArray(message.content)) {
        console.log("Content is an array with length:", message.content.length);
        
        // Loop through content blocks
        for (const contentBlock of message.content) {
          console.log("Content block type:", contentBlock.type);
          
          // Extract text from text-type blocks
          if (contentBlock.type === 'text') {
            responseText += contentBlock.text;
          }
        }
      } else if (message.content && typeof message.content === 'object') {
        console.log("Content is an object with keys:", Object.keys(message.content));
        
        // Use type assertion for TypeScript
        const contentObj = message.content as Record<string, unknown>;
        if (typeof contentObj.text === 'string') {
          responseText = contentObj.text;
        }
      }
      
      if (!responseText) {
        console.error('No text content found in response');
        console.log('Full message structure:', JSON.stringify(message, null, 2));
        return NextResponse.json(
          { error: 'No text content in API response' },
          { status: 500 }
        );
      }

      console.log("Extracted response text (first 200 chars):", responseText.substring(0, 200));
      
      // Parse the JSON from the response
      // The response might be formatted as a code block, so we need to extract the JSON
      let plan;
      try {
        // Try to parse the entire response as JSON
        plan = JSON.parse(responseText);
        console.log("Successfully parsed JSON directly");
      } catch (error) {
        const parseError = error instanceof Error ? error : new Error('Unknown parsing error');
        console.log("Direct JSON parsing failed, trying to extract from code blocks:", parseError.message);
        
        // If that fails, try to extract JSON from code blocks
        const jsonMatch = responseText.match(/```(?:json)?([\s\S]*?)```/);
        if (jsonMatch && jsonMatch[1]) {
          try {
            plan = JSON.parse(jsonMatch[1].trim());
            console.log("Successfully parsed JSON from code block");
          } catch (codeBlockError) {
            console.error("Failed to parse JSON from code block:", codeBlockError);
            return NextResponse.json(
              { error: "Failed to parse AI response as JSON from code block" },
              { status: 500 }
            );
          }
        } else {
          console.log("No JSON code block found, trying to extract structured data");
          
          // If no JSON or code block found, try to create a structured response from the text
          const summaryMatch = responseText.match(/summary[:\s]+(.*?)(?=features|techStack|\n\n)/i);
          const featuresMatch = responseText.match(/features[:\s]+([\s\S]*?)(?=techStack|timeline|\n\n)/i);
          const techStackMatch = responseText.match(/techStack[:\s]+([\s\S]*?)(?=timeline|\n\n)/i);
          const timelineMatch = responseText.match(/timeline[:\s]+([\s\S]*?)(?=\n\n|$)/i);
          
          // More robust extraction
          const extractFeatures = (text: string) => {
            if (!text) return [];
            // Extract bullet points, numbered lists or dash-prefixed items
            const items = text.split(/\n+/).map(line => 
              line.replace(/^[-*â€¢]|\d+[.)]|\s+/, '').trim()
            ).filter(item => item);
            return items.length ? items : ["No features extracted"];
          };
          
          plan = {
            summary: summaryMatch && summaryMatch[1] ? summaryMatch[1].trim() : 
              "A custom development plan tailored to your project requirements.",
            features: featuresMatch && featuresMatch[1] ? 
              extractFeatures(featuresMatch[1]) : 
              ["User authentication and profiles", "Core functionality", "Analytics dashboard", "Mobile responsiveness"],
            techStack: techStackMatch && techStackMatch[1] ? 
              extractFeatures(techStackMatch[1]) : 
              ["React.js for the frontend", "Node.js for the backend", "PostgreSQL for the database", "AWS for hosting"],
            timeline: timelineMatch && timelineMatch[1] ? timelineMatch[1].trim() : 
              "Development will take approximately 2-3 months, with an initial MVP in 4-6 weeks."
          };
        }
      }

      // Ensure plan has all required fields
      plan = {
        summary: plan.summary || "A detailed development plan for your project.",
        features: Array.isArray(plan.features) && plan.features.length ? plan.features : 
          ["User authentication and profiles", "Core functionality", "Analytics dashboard", "Mobile responsiveness"],
        techStack: Array.isArray(plan.techStack) && plan.techStack.length ? plan.techStack : 
          ["React.js for the frontend", "Node.js for the backend", "PostgreSQL for the database", "AWS for hosting"],
        timeline: plan.timeline || "Development will take approximately 2-3 months, with an initial MVP in 4-6 weeks."
      };

      // Return the plan as JSON
      return NextResponse.json({ plan });
    } catch (error) {
      console.error('Error generating AI plan:', error);
      return NextResponse.json(
        { error: 'Failed to generate AI plan' },
        { status: 500 }
      );
    }
  } catch (error) {
    console.error('Error generating AI plan:', error);
    return NextResponse.json(
      { error: 'Failed to generate AI plan' },
      { status: 500 }
    );
  }
} 