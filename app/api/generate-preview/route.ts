import { NextRequest, NextResponse } from 'next/server';
import { Anthropic } from '@anthropic-ai/sdk';
import fs from 'fs';
import path from 'path';
import crypto from 'crypto';

// Initialize Anthropic client with API key
const apiKey = process.env.ANTHROPIC_API_KEY;
const isDevelopment = process.env.NODE_ENV === 'development';

// Function to get the Anthropic client
function getAnthropicClient() {
  return new Anthropic({
    apiKey: apiKey || 'dummy-key-for-development'
  });
}

// Create a cache directory for development
const cacheDir = path.join(process.cwd(), '.cache');
if (isDevelopment && !fs.existsSync(cacheDir)) {
  try {
    fs.mkdirSync(cacheDir, { recursive: true });
  } catch (err) {
    console.error('Failed to create cache directory:', err);
  }
}

interface ProjectInput {
  projectId: string;
  name: string;
  description: string;
  projectType: string;
  targetAudience?: string;
  valueProposition?: string;
  userFlow?: Array<{id: string; content?: string; title?: string; description?: string}>;
  aiResponse?: string;
}

// Function to generate a cache key
function generateCacheKey(data: ProjectInput): string {
  const hash = crypto.createHash('md5').update(JSON.stringify(data)).digest('hex');
  return `generate-preview-${hash}.json`;
}

// Function to save response to cache
function saveToCache(key: string, data: string): void {
  if (!isDevelopment) return;
  
  try {
    const filePath = path.join(cacheDir, key);
    fs.writeFileSync(filePath, data);
    console.log(`Cached response to ${filePath}`);
  } catch (err) {
    console.error('Failed to cache response:', err);
  }
}

// Function to get response from cache
function getFromCache(key: string): string | null {
  if (!isDevelopment) return null;
  
  try {
    const filePath = path.join(cacheDir, key);
    if (fs.existsSync(filePath)) {
      console.log(`Loading response from cache: ${filePath}`);
      return fs.readFileSync(filePath, 'utf-8');
    }
  } catch (err) {
    console.error('Failed to read from cache:', err);
  }
  
  return null;
}

// Mock code files for testing/development
const mockCodeFiles = {
  'index.html': `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Sample Project</title>
  <link rel="stylesheet" href="styles.css">
</head>
<body>
  <header>
    <div class="container">
      <h1>Sample Project</h1>
      <nav>
        <ul>
          <li><a href="#features">Features</a></li>
          <li><a href="#about">About</a></li>
          <li><a href="#contact">Contact</a></li>
        </ul>
      </nav>
    </div>
  </header>
  
  <main>
    <section id="hero" class="hero">
      <div class="container">
        <h2>Welcome to our Sample Project</h2>
        <p>This is a demonstration of a simple website generated by Claude 3.7</p>
        <button class="cta-button">Get Started</button>
      </div>
    </section>
    
    <section id="features" class="features">
      <div class="container">
        <h2>Key Features</h2>
        <div class="feature-grid">
          <div class="feature-card">
            <h3>Feature 1</h3>
            <p>Description of the first amazing feature of this project.</p>
          </div>
          <div class="feature-card">
            <h3>Feature 2</h3>
            <p>Description of the second amazing feature of this project.</p>
          </div>
          <div class="feature-card">
            <h3>Feature 3</h3>
            <p>Description of the third amazing feature of this project.</p>
          </div>
        </div>
      </div>
    </section>
    
    <section id="about" class="about">
      <div class="container">
        <h2>About Us</h2>
        <p>We are a passionate team dedicated to creating wonderful experiences.</p>
      </div>
    </section>
    
    <section id="contact" class="contact">
      <div class="container">
        <h2>Contact Us</h2>
        <form id="contact-form">
          <div class="form-group">
            <label for="name">Name</label>
            <input type="text" id="name" name="name" required>
          </div>
          <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" name="email" required>
          </div>
          <div class="form-group">
            <label for="message">Message</label>
            <textarea id="message" name="message" rows="5" required></textarea>
          </div>
          <button type="submit" class="submit-button">Send Message</button>
        </form>
      </div>
    </section>
  </main>
  
  <footer>
    <div class="container">
      <p>&copy; 2024 Sample Project. All rights reserved.</p>
    </div>
  </footer>
  
  <script src="script.js"></script>
</body>
</html>`,

  'styles.css': `/* Reset and base styles */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: 'Arial', sans-serif;
  line-height: 1.6;
  color: #333;
}

.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 20px;
}

/* Header styles */
header {
  background-color: #ffffff;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  position: sticky;
  top: 0;
  z-index: 100;
}

header .container {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 20px;
}

header h1 {
  font-size: 1.8rem;
  color: #3498db;
}

nav ul {
  display: flex;
  list-style: none;
}

nav li {
  margin-left: 20px;
}

nav a {
  text-decoration: none;
  color: #333;
  font-weight: 500;
  transition: color 0.3s;
}

nav a:hover {
  color: #3498db;
}

/* Hero section */
.hero {
  background-color: #3498db;
  color: white;
  padding: 80px 0;
  text-align: center;
}

.hero h2 {
  font-size: 2.5rem;
  margin-bottom: 20px;
}

.hero p {
  font-size: 1.2rem;
  margin-bottom: 30px;
  max-width: 600px;
  margin-left: auto;
  margin-right: auto;
}

.cta-button {
  background-color: white;
  color: #3498db;
  border: none;
  padding: 12px 24px;
  font-size: 1rem;
  font-weight: bold;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s, transform 0.2s;
}

.cta-button:hover {
  background-color: #f4f4f4;
  transform: translateY(-2px);
}

/* Features section */
.features {
  padding: 80px 0;
  background-color: #f9f9f9;
}

.features h2 {
  text-align: center;
  margin-bottom: 40px;
  font-size: 2rem;
}

.feature-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 30px;
}

.feature-card {
  background-color: white;
  padding: 30px;
  border-radius: 8px;
  box-shadow: 0 4px 6px rgba(0,0,0,0.1);
  transition: transform 0.3s;
}

.feature-card:hover {
  transform: translateY(-5px);
}

.feature-card h3 {
  color: #3498db;
  margin-bottom: 15px;
}

/* About section */
.about {
  padding: 80px 0;
  text-align: center;
}

.about h2 {
  margin-bottom: 20px;
  font-size: 2rem;
}

.about p {
  max-width: 800px;
  margin: 0 auto;
  font-size: 1.1rem;
}

/* Contact section */
.contact {
  padding: 80px 0;
  background-color: #f9f9f9;
}

.contact h2 {
  text-align: center;
  margin-bottom: 40px;
  font-size: 2rem;
}

#contact-form {
  max-width: 600px;
  margin: 0 auto;
}

.form-group {
  margin-bottom: 20px;
}

label {
  display: block;
  margin-bottom: 5px;
  font-weight: 500;
}

input,
textarea {
  width: 100%;
  padding: 10px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 1rem;
}

.submit-button {
  background-color: #3498db;
  color: white;
  border: none;
  padding: 12px 24px;
  font-size: 1rem;
  font-weight: bold;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s;
  display: block;
  width: 100%;
}

.submit-button:hover {
  background-color: #2980b9;
}

/* Footer */
footer {
  background-color: #333;
  color: white;
  padding: 20px 0;
  text-align: center;
}`,

  'script.js': `// Wait for DOM content to be fully loaded
document.addEventListener('DOMContentLoaded', function() {
  console.log('Sample Project JavaScript loaded');
  
  // Smooth scrolling for navigation links
  document.querySelectorAll('nav a').forEach(anchor => {
    anchor.addEventListener('click', function(e) {
      e.preventDefault();
      
      const targetId = this.getAttribute('href');
      const targetElement = document.querySelector(targetId);
      
      if (targetElement) {
        window.scrollTo({
          top: targetElement.offsetTop - 70,
          behavior: 'smooth'
        });
      }
    });
  });
  
  // Form submission handling
  const contactForm = document.getElementById('contact-form');
  if (contactForm) {
    contactForm.addEventListener('submit', function(e) {
      e.preventDefault();
      
      // Get form values
      const name = document.getElementById('name').value;
      const email = document.getElementById('email').value;
      const message = document.getElementById('message').value;
      
      // In a real application, you would send this data to a server
      console.log('Form submission:', { name, email, message });
      
      // Show a success message
      alert('Thank you for your message! We will get back to you soon.');
      
      // Reset the form
      contactForm.reset();
    });
  }
  
  // Add animation to feature cards when they come into view
  const featureCards = document.querySelectorAll('.feature-card');
  
  // Safe function to check if an element is in viewport, with null check
  function isInViewport(element) {
    if (!element) return false;
    const rect = element.getBoundingClientRect();
    return (
      rect.top >= 0 &&
      rect.left >= 0 &&
      rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
      rect.right <= (window.innerWidth || document.documentElement.clientWidth)
    );
  }
  
  // Add scroll event to check if feature cards are in viewport
  // Using requestAnimationFrame to throttle scroll events
  let ticking = false;
  function checkVisibility() {
    if (!ticking) {
      window.requestAnimationFrame(() => {
        featureCards.forEach(card => {
          if (isInViewport(card)) {
            card.style.opacity = '1';
            card.style.transform = 'translateY(0)';
          }
        });
        ticking = false;
      });
      ticking = true;
    }
  }
  
  // Initial styles for animation
  featureCards.forEach(card => {
    card.style.opacity = '0';
    card.style.transform = 'translateY(20px)';
    card.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
  });
  
  // Check visibility on load and scroll with throttling
  window.addEventListener('load', checkVisibility);
  window.addEventListener('scroll', checkVisibility);
  
  // Add interaction to the CTA button
  const ctaButton = document.querySelector('.cta-button');
  if (ctaButton) {
    ctaButton.addEventListener('click', function() {
      alert('Thank you for your interest! This would typically lead to a sign-up or download page.');
    });
  }
});`
};

export async function POST(request: NextRequest) {
  try {
    // Get data from the request
    const data = await request.json();
    const { prompt, projectName, projectDescription, projectType } = data;

    if (!prompt) {
      return NextResponse.json(
        { error: 'Missing required fields: prompt' },
        { status: 400 }
      );
    }

    // Create a cache key for this request
    const cacheKey = generateCacheKey(data);
    
    // Check cache first (in development mode)
    const cachedResponse = getFromCache(cacheKey);
    if (cachedResponse) {
      return NextResponse.json({ files: cachedResponse });
    }

    // Check for API key
    if (!apiKey) {
      console.warn('ANTHROPIC_API_KEY is not set, using mock code files for development');
      
      if (isDevelopment) {
        saveToCache(cacheKey, JSON.stringify(mockCodeFiles));
      }
      
      return NextResponse.json(
        { files: mockCodeFiles },
        { status: 200 }
      );
    }

    // Initialize Anthropic client
    const anthropic = getAnthropicClient();

    // Create a system prompt for Claude
    const systemPrompt = `You are an expert web developer tasked with generating code for a ${projectType || 'web'} project. 
Your goal is to create a simple, functional website based on the user's prompt.

Please generate three required files:
1. index.html - The main HTML file
2. styles.css - The CSS file for styling
3. script.js - The JavaScript file for interactivity

Important guidelines:
- Create clean, well-structured code that follows modern best practices
- Add appropriate comments to explain your code
- Ensure the three files work together to create a functional website
- Focus on creating a visually appealing and responsive design
- Include interactive elements where appropriate

Your response MUST be in this exact format:
{
  "index.html": "<!DOCTYPE html>\\n<html>...</html>",
  "styles.css": "/* CSS styles */\\n...",
  "script.js": "// JavaScript code\\n..."
}

Do not include any markdown or explanatory text outside the JSON structure.
Ensure your JSON is valid and each file's content is a string with proper escaping.`;

    // Create the user message with the prompt
    const userMessage = `${prompt}

Project Name: ${projectName || 'Sample Project'}
Project Description: ${projectDescription || 'A web project'}
Project Type: ${projectType || 'website'}

Please generate the three required files (index.html, styles.css, and script.js) that work together to create a functional website based on this description.`;

    console.log("Calling Anthropic API to generate code...");
    
    try {
      // Call Claude API to generate the code files
      const message = await anthropic.messages.create({
        model: "claude-3-7-sonnet-20250219",
        max_tokens: 4000,
        temperature: 0.3,
        system: systemPrompt,
        messages: [
          {
            role: "user",
            content: userMessage
          }
        ]
      });

      // Extract the response text
      let responseText = '';
      
      if (Array.isArray(message.content)) {
        for (const contentBlock of message.content) {
          if (contentBlock.type === 'text') {
            responseText += contentBlock.text;
          }
        }
      }

      if (!responseText) {
        console.error('No text content found in response');
        return NextResponse.json(
          { error: 'No content in API response' },
          { status: 500 }
        );
      }

      console.log('Received response from Claude, length:', responseText.length);

      // Try to parse JSON from the response
      let codeFiles;
      try {
        // Try to extract JSON if it's wrapped in code blocks
        const jsonMatch = responseText.match(/```(?:json)?([\s\S]*?)```/);
        if (jsonMatch) {
          codeFiles = JSON.parse(jsonMatch[1].trim());
        } else {
          // If no code blocks, try to parse the whole response
          codeFiles = JSON.parse(responseText);
        }
        
        // Cache the successful response
        if (isDevelopment) {
          saveToCache(cacheKey, JSON.stringify(codeFiles));
        }
        
        return NextResponse.json({ files: codeFiles }, { status: 200 });
      } catch (error) {
        console.error('Failed to parse JSON response:', error);
        // Return mock files if JSON parsing fails
        console.warn('Using mock files due to JSON parsing error');
        return NextResponse.json({ files: mockCodeFiles }, { status: 200 });
      }
    } catch (error) {
      console.error('Error calling Anthropic API:', error);
      return NextResponse.json(
        { error: 'Failed to generate code' },
        { status: 500 }
      );
    }
  } catch (error) {
    console.error('Error processing request:', error);
    return NextResponse.json(
      { error: 'Server error' },
      { status: 500 }
    );
  }
} 